<!DOCTYPE html>
<html lang="en">


@inject VariableStorage varStorage

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css" />
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/standard-base.css">
    <link rel="stylesheet" href="app.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet @rendermode="@RenderModeForPage" />
</head>

<body class="container-fluid">
    <Routes @rendermode="@RenderModeForPage" />
    <script src="_framework/blazor.web.js"></script>
    <script src="bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
    <script src="Scripts.js"></script>

</body>

</html>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private IComponentRenderMode? RenderModeForPage = InteractiveServer;

    protected override async Task OnInitializedAsync()
    {
        // TokenProvider.AccessToken = await HttpContext.GetTokenAsync("access_token");
        // TokenProvider.RefreshToken = await HttpContext.GetTokenAsync("refresh_token");

       // return await base.OnInitializedAsync();
    }
}
